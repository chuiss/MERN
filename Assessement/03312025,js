// 31st March - 2025 : ES6, eventloop and core JS questions
// All questions are mandatory - 14 out of 15 needs to be done, 1st question is equal to two question so can't be left
// 7th requires proper elaboration and example

const heroes = [
    { name: 'Wolverine',      family: 'Marvel',    isEvil: false },
    { name: 'Deadpool',       family: 'Marvel',    isEvil: false },
    { name: 'Magneto',        family: 'Marvel',    isEvil: true  },
    { name: 'Charles Xavier', family: 'Marvel',    isEvil: false },
    { name: 'Batman',         family: 'DC Comics', isEvil: false },
    { name: 'Harley Quinn',   family: 'DC Comics', isEvil: true  },
    { name: 'Legolas',        family: 'Tolkien',   isEvil: false },
    { name: 'Gandalf',        family: 'Tolkien',   isEvil: false },
    { name: 'Saruman',        family: 'Tolkien',   isEvil: true  }
  ]
  
// 1. How to preserve the immutability on my heroes list? Solve below problems using the same

console.log ("a. Get heroes who are not evils")
const heroIsNotEvi = heroes.filter(hero => !hero.isEvil )
console.log(heroIsNotEvi)

console.log ("\nb. Print Unique family names")
const uniqueName = [...new Set(heroes.map(heroes => heroes.family))]
console.log(uniqueName)

console.log ("\nc. Print Hero Names from given objects, and append sir in each of them before printing")
const nameObjWithsir = heroes.map(heroObj => {
    return "Sir" + heroObj.name;
}).filter ((names) => names != undefined)
console.log(nameObjWithsir)

console.log ("\n d. Do we have any hero in Marvel Family who is not evil")
const hasGoodMarvalHero = heroes.some(hero => hero.family === 'Marvel' && !hero.isEvil)
console.log(hasGoodMarvalHero)


//2. Use the spread and rest operator to create a function which can multiply numbers from 1...n (n is the number of choice), 
//   using apply keyword we need to implement this one

//3. Print the last name through destructuring and add a contact number:9119119110 as well
const person1 = {
    userDetails :{
        first: "FirstName",
        last: "LastName"
    }
}

//4. Give me an example of const data manipulation

//5. What is the difference between for-of and for-in show with examples
console.log ("\nFor-of: used to iterate over iterable values like arrays, string, maps...")
const superHeroes = ['Batman', 'Wonder Woman', 'Aquaman']
for(const hero of superHeroes){
    console.log(hero)
}

console.log ("\nFor-in: used to iterate over the keys *or index")
for(const key in superHeroes){
    console.log(key, ":", superHeroes[key])
}
//6. Give me an example of bind and write its usage, comparison with arrow function

//7. Create an example showing usage of event loop in concurrent execution cycle

//8. create an example showing usage of short hand and default param.
console.log ("\nDefault param")
function createHero(name = 'unknown hero', family='unknown family', isEvil = false){
    return { 
        name, //shorthand for name : name
        family, //shorthand for family:family
        isEvil //shorthand isEvil : isEvil
    };
}
const hero1 = createHero('Ironman','Marvel')
const hero2 = createHero() //use default

console.log(hero1)
console.log(hero2)


console.log ("\n9.Create two objects with some properties and merge them using Object method and ES6 way")
const obj1 = {name: "Batman", isEvil: false };
const obj2 = {family: "DC" , power: 'Money'};

const merge1 = Object.assign({}, obj1, obj2)

console.log(merge1)
//10. Give me an example of map and set collection each with at least four properties implemented - like get, set, clear, etc

const heroMap = new Map()
heroMap.set('Batman', { family: 'DC', isEvil: false });
heroMap.set('Magneto', { family: 'Marvel', isEvil: true });

//get(key)
console.log(heroMap.get('Batman'))
//has(key)
console.log(heroMap.has('Magneto'))
//delete(key)
heroMap.delete('Magneto')
//size 
console.log(heroMap.size)
//clear
heroMap.clear
console.log(heroMap.size)
//11. Create a promise object that get resloved after two seconds and rejected after three. Also it returns five ES6 features on resolved

//12. Use the spread and rest operator to create a function which can multiple numbers from 1...n (n is the number of choice)

//13. Use the question #11 to build promises using async and await - with multithread

//14. Create an example of generator function of your choice

//15. Explain your knowledge on function and object protoype what is the purpose of the same - example